///
/// Copyright (c) 2009-2014 Nous Xiong (348944179 at qq dot com)
///
/// Distributed under the Boost Software License, Version 1.0. (See accompanying
/// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
///
/// See https://github.com/nousxiong/gce for latest version.
///

#ifndef GCE_ACTOR_ATOM_HPP
#define GCE_ACTOR_ATOM_HPP

#include <gce/config.hpp>
#include <boost/integer.hpp>
#include <string>
#include <cstring>

namespace gce
{
/// Since lordoffox's str2val.h (http://bbs.cppfans.org/forum.php?mod=viewthread&tid=56&extra=page%3D1)
inline boost::uint64_t atom(char const* str)
{
  std::size_t len = std::strlen(str);
  if (len > 14)
  {
    return 0;
  }

  static char const* const encoding_table =
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x1\x2\x3\x4\x5\x6\x7\x8\x9\xa\xb\xc\xd\xe\xf"
    "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x0\x0\x0\x0\x1b"
    "\x0\x1\x2\x3\x4\x5\x6\x7\x8\x9\xa\xb\xc\xd\xe\xf"
    "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0"
    "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0";

  boost::uint64_t value = 0;
  boost::uint32_t encode_value = 0;
  for (std::size_t i=0 ; i<len; ++i)
  {
    value *= 28;
    encode_value = encoding_table[(int)str[i]];
    if (encode_value)
    {
      value += encode_value;
    }
    else
    {
      return 0;
    }
  }
  return value;
}

/// Since lordoffox's str2val.h (http://bbs.cppfans.org/forum.php?mod=viewthread&tid=56&extra=page%3D1)
inline std::string atom(boost::uint64_t what)
{
  std::string ret;
  static std::string::const_pointer const decoding_table = "\0abcdefghijklmnopqrstuvwxyz_";
  boost::uint64_t x = what;
  std::string::value_type buf[21] = {0};
  std::size_t pos = 19;
  while (x)
  {
    buf[pos--] = decoding_table[x % 28];
    x = x / 28;
  }
  ++pos;
  ret.assign(buf + pos, 20 - pos);
  return ret;
}
}

#endif /// GCE_ACTOR_ATOM_HPP
